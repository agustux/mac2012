- hosts: localhost
  tasks:
  - name: setting keyboard configurations to Macbook/Macbook Pro (debconf 1/2)
    ansible.builtin.debconf:
      name: debconf-utils
      question: keyboard-configuration/model
      value: "MacBook/MacBook Pro"
      vtype: select
    become: true
    tags:
    - mac-keyboard
  - name: setting keyboard configurations to Macbook/Macbook Pro (debconf 2/2)
    ansible.builtin.debconf:
      name: debconf-utils
      question: keyboard-configuration/modelcode
      value: "macbook78"
      vtype: string
    become: true
    tags:
    - mac-keyboard

  - name: configuring xmodmap
    ansible.builtin.shell: "xmodmap -pke > ~/.Xmodmap"
    tags:
    - xmodmap
    - mac-keyboard
  - name: remapping super to ctrl for shortcuts
    ansible.builtin.blockinfile:
      path: ~/.Xmodmap
      append_newline: true
      block: |
        ! bind left command key as another Ctrl key
          remove mod4 = Super_L
          keysym Super_L = Control_L
          add Control = Control_L
      marker: "! {mark} ANSIBLE MANAGED BLOCK"
    tags:
    - xmodmap
    - mac-keyboard
  - name: loading xmodmap
    ansible.builtin.shell: "xmodmap ~/.Xmodmap"
    tags:
    - xmodmap
    - mac-keyboard

  - name: copying fan setting on wakeup from suspend
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/fan-overclock.sh"
      dest: /usr/lib/systemd/system-sleep/fan-overclock.sh
      mode: '750'
    become: true
    tags: mac-fan
  - name: copying fan setting on startup (script)
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/fan-overclock-startup.sh"
      dest: /opt/fan-overclock-startup.sh
      mode: '750'
    become: true
    tags: mac-fan
  - name: copying fan setting on startup (systemd_service)
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/fan-overclock.service"
      dest: /etc/systemd/system/fan-overclock.service
    become: true
    tags: mac-fan
  - name: enabling fan-overclock.service
    ansible.builtin.systemd_service:
      name: fan-overclock
      enabled: true
    become: true
    tags: mac-fan

  - name: loading dconf settings file (theme, peripheral, and other settings)
    ansible.builtin.shell: "dconf load / < {{ playbook_dir }}/files/dconf-settings.ini"
    tags:
    - dconf
    - mac-keyboard

  - name: loading thinkpad(generic) settings file (theme, peripheral, and other settings)
    ansible.builtin.shell: "dconf load / < {{ playbook_dir }}/files/dconf-settings-thinkpad.ini"
    tags:
    - thinkpad
    - never
  - name: installing thinkfan tool
    ansible.builtin.apt:
      name: thinkfan
      state: present
    become: true
    tags:
    - thinkpad
    - never
  - name: fixing thinkpad fan-control bool in modprobe
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/thinkfan.conf"
      dest: /etc/modprobe.d/thinkfan.conf
      mode: '0644'
    become: true
    tags:
    - thinkpad
    - never
  - name: loading thinkfan fan_control bool
    ansible.builtin.shell: sudo modprobe -r thinkpad_acpi && sudo modprobe thinkpad_acpi
    become: true
    tags:
    - thinkpad
    - never
  - name: adding MAC address randomizing conf to NetworkManager
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/mac-randomize.conf"
      dest: /etc/NetworkManager/conf.d/mac-randomize.conf
      mode: '0644'
    become: true
    tags:
    - thinkpad
    - never

  - name: creating .config/autostart directory for camera patch
    ansible.builtin.file:
      path: ~/.config/autostart
      state: directory
      mode: '700'
    tags: autostart
  - name: copying snapshot patch to autostart processes
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/systemctl.desktop"
      dest: ~/.config/autostart/systemctl.desktop
      mode: '664'
    tags: autostart

  - name: opening sublime to create configuration files
    ansible.builtin.shell: "subl"
    tags: sublime
  - name: sleeping
    ansible.builtin.pause:
      seconds: 5
    tags: sublime
  - name: pkilling sublime
    ansible.builtin.shell: "pkill sublime_text"
    tags: sublime
  - name: configuring sublime
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/Preferences.sublime-settings"
      dest: ~/.config/sublime-text/Packages/User/Preferences.sublime-settings
    tags: sublime

  - name: adding git aliases
    community.general.git_config:
      name: "{{ item.name }}"
      scope: global
      value: "{{ item.value }}"
    loop:
      - { name: alias.co, value: checkout}
      - { name: alias.br, value: branch}
      - { name: alias.ci, value: commit}
      - { name: alias.st, value: status}
      - { name: user.email, value: "{{ ansible_user_id }}@ubuntu"}
      - { name: user.name, value: "{{ ansible_user_id }}"}
    tags: git

  - name: enabling and starting bluetooth service
    ansible.builtin.systemd_service:
      name: bluetooth.service
      enabled: true
      state: started
    become: true
    tags: bluetooth
  - name: unblocking bluetooth
    ansible.builtin.shell: "sudo rfkill unblock bluetooth"
    become: true
    tags: bluetooth
  - name: copying bredr bluetooth and A2DP profile enabled configs
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/main.conf"
      dest: /etc/bluetooth/main.conf
    become: true
    tags: bluetooth
  - name: restarting bluetooth
    ansible.builtin.shell: "sudo /etc/init.d/bluetooth restart"
    tags: bluetooth
  - name: loading codecs for airpods compatibility
    ansible.builtin.blockinfile:
      path: /usr/share/wireplumber/wireplumber.conf
      block: |
        monitor.bluez.properties = {
          bluez5.codecs = [ sbc sbc_xq aac ]
        }

    become: true
    tags: bluetooth
  - name: restarting wireplumber
    ansible.builtin.systemd_service:
      name: wireplumber
      state: restarted
      scope: user
    tags: bluetooth

  - name: creating .ssh directory
    ansible.builtin.file:
      path: ~/.ssh
      state: directory
      mode: '700'
    tags: ssh-keygen
  - name: generating SSH key to add to github
    community.crypto.openssh_keypair:
      path: ~/.ssh/id_ed25519
      type: ed25519
      comment: "{{ ansible_user_id }}@ubuntu"
    tags: ssh-keygen

  - name: starting the configuration setup for printer
    ansible.builtin.shell: "cat {{ playbook_dir }}/files/printerconfigs.txt | {{ playbook_dir }}/files/printerconfigs.sh"
    tags: printer
  - name: stopping cupsd to load printer network settings
    ansible.builtin.systemd_service:
      state: stopped
      name: cups
    tags: printer
    become: true
  - name: configuring printer network settings
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/printers.conf"
      dest: /etc/cups/printers.conf
    become: true
    tags: printer
  - name: restarting cupsd
    ansible.builtin.systemd_service:
      state: restarted
      name: cups
    tags: printer
    become: true

  - name: allow all access to port 53317 (for localsend)
    community.general.ufw:
      rule: allow
      port: "53317"
      from_ip: "192.168.1.0/16"
      state: enabled
    become: true
    tags: localsend

  - name: installing and enabling blur-my-shell and openweather-refined
    ansible.builtin.shell: "{{ playbook_dir }}/files/gnome-extensions.sh"
    tags: gnome-extensions

  - name: copying service file for performance mode on cpu
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/set-cpufreq.service"
      dest: /etc/systemd/system/set-cpufreq.service
    become: true
    tags: performance
  - name: copying script for performance mode on cpu
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/files/set-cpufreq.sh"
      dest: /usr/bin/set-cpufreq.sh
      mode: '755'
    become: true
    tags: performance
  - name: enabling set-cpufreq service
    ansible.builtin.systemd_service:
      name: set-cpufreq
      enabled: true
      daemon-reload: true
    become: true
    tags: performance

  - name: cleaning up tar archive
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    with_fileglob:
      - "~/v*.tar.gz"
